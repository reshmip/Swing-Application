/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.CommunityMemberRole;

import business.Person.Person;
import business.Sensors.Sensor;
import business.Sensors.SensorsCatalog;
import business.Validations.MyNumericVerifier;
import static com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor.Uri.Enum.table;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Random;
import javax.swing.InputVerifier;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Reshmi
 */
public class ManageEnergyConsumptionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEnergyConsumptionJPanel
     */
    private JPanel userProcessContainer;
    private Person person;
    private SensorsCatalog sensorList;
    public ManageEnergyConsumptionJPanel(JPanel userProcessContainer,Person person) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.person = person;
        populateComboBox();
        populateTable();
        addVerifiers();
    }

    private void addVerifiers() {
        InputVerifier integerVerifier = new MyNumericVerifier();
        readingTxt.setInputVerifier(integerVerifier);
        hoursTxt.setInputVerifier(integerVerifier);
    }
    public void populateComboBox()
    {
        sensorTypeComboBox.removeAllItems();
        for(Sensor.SensorType type: Sensor.SensorType.values())
        {
            sensorTypeComboBox.addItem(type);
        }
    }
    
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel)sensorsTable.getModel();
        model.setRowCount(0);
        if(person.getSensorsList()!=null){
        for(Sensor sensor:person.getSensorsList().getSensorsList())
        {
            Object[] row = new Object[4];
//            row[0] = sensor;
            row[0] = sensor.getReadingRecorded();
            row[1] = sensor.getSensorType().getValue();
            row[2] = sensor.getNumberWatt();
            row[3] = sensor.getHours();
            model.addRow(row);
            int watts = sensor.getNumberWatt();
            sensor.setConsumptionLevel(person.getSensorsList().ExcessConsumption(sensor, watts));
        }
        }
        TableColumnModel columnModel = sensorsTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(5);
        //sensorsTable.getColumn(0).setWidth(5);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorsTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hoursTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        readingTxt = new javax.swing.JTextField();
        sensorTypeComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));

        addBtn.setBackground(new java.awt.Color(51, 153, 0));
        addBtn.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        sensorsTable.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        sensorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Reading Taken On", "Appliance Name", "No of Watts", "No of Hrs/Day"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(sensorsTable);

        backJButton.setBackground(new java.awt.Color(51, 153, 0));
        backJButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/CommunityMemberRole/appliances_1.jpg"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Appliance Sensor Reading", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 11), new java.awt.Color(102, 0, 102))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel2.setText("Power Consumption");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel5.setText("hours/day");

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel6.setText("watts(W)");

        hoursTxt.setEditable(false);
        hoursTxt.setBackground(new java.awt.Color(255, 255, 255));
        hoursTxt.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel4.setText("Hours of use");

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setText("Appliance Type");

        readingTxt.setEditable(false);
        readingTxt.setBackground(new java.awt.Color(255, 255, 255));
        readingTxt.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        sensorTypeComboBox.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        sensorTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sensorTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorTypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(65, 65, 65)
                        .addComponent(sensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(readingTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(hoursTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(readingTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(hoursTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton)
                                .addGap(85, 85, 85)
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBtn)
                    .addComponent(backJButton))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        Sensor sensor = new Sensor();
        Sensor.SensorType type = (Sensor.SensorType)sensorTypeComboBox.getSelectedItem();
        String watt = readingTxt.getText();
        sensor.setSensorType(type);
        sensor.setNumberWatt(Integer.parseInt(watt));
        sensor.setReadingRecorded(new Date());
        person.getSensorsList().addSensor(sensor);
        sensor.setHours(Integer.parseInt(hoursTxt.getText()));
        populateTable();
        //clearFields();
    }//GEN-LAST:event_addBtnActionPerformed

    private void sensorTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTypeComboBoxActionPerformed
        Sensor.SensorType type = (Sensor.SensorType)sensorTypeComboBox.getSelectedItem();
        if(type!=null){
        if(type.getValue().equals("Heater")){
        Random h = new Random();
        int hH = 1000;
        int hL = 300;
        int  heater = h.nextInt(hH-hL) + hL;
        readingTxt.setText(String.valueOf(heater));
        
        Random hh = new Random();
        int hhH = 15;
        int hhL = 2;
        int  hheater = hh.nextInt(hhH-hhL) + hhL;
        hoursTxt.setText(String.valueOf(hheater));
        }
        else if(type.getValue().equals("Incandescent Bulbs")){
        Random l = new Random();
        int lH = 105;
        int lL = 20;
        int  light = l.nextInt(lH-lL) + lL;
        readingTxt.setText(String.valueOf(light));
        
        Random ll = new Random();
        int llH = 15;
        int llL = 2;
        int  llight = ll.nextInt(llH-llL) + llL;
        hoursTxt.setText(String.valueOf(llight));
        }
        else if(type.getValue().equals("Microwave")){
        Random m = new Random();
        int mH = 850;
        int mL = 100;
        int  microwave = m.nextInt(mH-mL) + mL;
        readingTxt.setText(String.valueOf(microwave));
        
        Random mm = new Random();
        int mmH = 3;
        int mmL = 1;
        int  mmicrowave = mm.nextInt(mmH-mmL) + mmL;
        hoursTxt.setText(String.valueOf(mmicrowave));
        }
        else if(type.getValue().equals("Television")){
        Random t = new Random();
        int tH = 250;
        int tL = 70;
        int  tv = t.nextInt(tH-tL) + tL;
        readingTxt.setText(String.valueOf(tv));
        
        Random tt = new Random();
        int ttH = 10;
        int ttL = 1;
        int  ttv = tt.nextInt(ttH-ttL) + ttL;
        hoursTxt.setText(String.valueOf(ttv));
        }
        else if(type.getValue().equals("Refrigerator")){
        Random r = new Random();
        int rH = 750;
        int rL = 100;
        int  frige = r.nextInt(rH-rL) + rL;
        readingTxt.setText(String.valueOf(frige));
        
        Random rr = new Random();
        int rrH = 24;
        int rrL = 5;
        int  ffrige = rr.nextInt(rrH-rrL) + rrL;
        hoursTxt.setText(String.valueOf(ffrige));
        }
        }
    }//GEN-LAST:event_sensorTypeComboBoxActionPerformed

    public void clearFields()
    {
        readingTxt.setText("");
        hoursTxt.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField hoursTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField readingTxt;
    private javax.swing.JComboBox sensorTypeComboBox;
    private javax.swing.JTable sensorsTable;
    // End of variables declaration//GEN-END:variables
}
